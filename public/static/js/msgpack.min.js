/**
 * Local fallback for MessagePack library
 */
(function(global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = global || self, factory(global.MessagePack = {}));
}(this, function(exports) {
  'use strict';

  // Simple fallback implementation of MessagePack
  // This is a minimal version that will handle basic encoding/decoding needs
  
  function encode(data) {
    try {
      // For our fallback, just use JSON and convert to binary
      const jsonStr = JSON.stringify(data);
      const bytes = new TextEncoder().encode(jsonStr);
      console.warn('Using fallback MessagePack encode (JSON-based)');
      return bytes;
    } catch (e) {
      console.error('MessagePack encode fallback failed:', e);
      throw e;
    }
  }
  
  function decode(bytes) {
    try {
      // For fallback, assume it's JSON in binary form
      const jsonStr = new TextDecoder().decode(bytes);
      console.warn('Using fallback MessagePack decode (JSON-based)');
      return JSON.parse(jsonStr);
    } catch (e) {
      console.error('MessagePack decode fallback failed:', e);
      throw e;
    }
  }

  exports.encode = encode;
  exports.decode = decode;
  exports.default = { encode, decode };
  
  console.info('MessagePack fallback library loaded');
}));
